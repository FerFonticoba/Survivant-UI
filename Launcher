using System.Collections.Generic;
using UnityEngine;
using Photon.Pun;
using Photon.Realtime;
using TMPro;

public class Launcher : MonoBehaviourPunCallbacks
{
    public static Launcher instance;

    //Buttons
    public GameObject menuButtons, appearanceButtons, configurationMenu, startButton;

    //Effects
    public MenuCameraMovement CameraMovement;
    public Mainmenueffects menuEffects;

    //Create Room Objects
    public GameObject createRoomScreen;
    public TMP_InputField roomNameInput;

    //Room
    public GameObject roomScreen;
    public TMP_Text roomNameText;

    //Error screen
    public GameObject errorScreen;
    public TMP_Text errorText;

    //Finding Room Variables
    public GameObject roomBrowserScreen;
    public RoomButtonScript theRoomButton;
    private List<RoomButtonScript> allRoomButtons = new List<RoomButtonScript>();

    //Players Names 
    public TMP_Text playerNameLabel;
    private List<TMP_Text> allPlayerNames = new List<TMP_Text>();

    //Write your name
    public GameObject nameInputScreen;
    public TMP_InputField nameInput;
    public static int hasSetNick = 0;
    public TMP_Text username;

    //Loading Bar Variables
    public GameObject loadingScreen;
    public TMP_Text loadingText;

    //Changing Maps
    public string[] allMaps;

    //Sending info between scenes
    public Send SendVariable;

    private void Awake()
    {
        instance = this;
    }

    void Start()
    {
        //Call the CloseMenus function to verify that all screens are closed.
        CloseMenus();

        loadingScreen.SetActive(true);
        loadingText.text = "Connecting to network...";

        if (!PhotonNetwork.IsConnected)
        {
            PhotonNetwork.ConnectUsingSettings();
        }
    }

    void CloseMenus()
    {
        loadingScreen.SetActive(false);
        menuButtons.SetActive(false);
        createRoomScreen.SetActive(false);
        roomScreen.SetActive(false);
        errorScreen.SetActive(false);
        roomBrowserScreen.SetActive(false);
        nameInputScreen.SetActive(false);
    }

    public override void OnConnectedToMaster()
    {
        PhotonNetwork.JoinLobby();

        PhotonNetwork.AutomaticallySyncScene = true;

        loadingText.text = "Joining Lobby...";
    }

    public override void OnJoinedLobby()
    {
        PhotonNetwork.NickName = "Player " + Random.Range(1, 9).ToString();

        //Player username logic.
        if (PlayerPrefs.GetInt("UserName") != 1)
        {
            CloseMenus();
            //When you open this screen, you can type your new name and save it (using buttons that will call other functions).
            nameInputScreen.SetActive(true);

            if (PlayerPrefs.HasKey("playerName"))
            {
                //When you open the page to change your name, if you already had a name saved, display it.
                nameInput.text = PlayerPrefs.GetString("playerName");
            }
        }
        else
        {
            //If a name is already saved, display it.
            PhotonNetwork.NickName = PlayerPrefs.GetString("playerName");
            nameInput.text = PlayerPrefs.GetString("playerName");
            CloseMenus();
            menuButtons.SetActive(true);
        }

        //Showing the username in the menu.
        username.text = nameInput.text;
    }

    public void EditNickName()
    {
        //Shows on the username screen the name you had previously selected.
        CloseMenus();
        nameInputScreen.SetActive(true);

        if (PlayerPrefs.HasKey("playerName"))
        {
            nameInput.text = PlayerPrefs.GetString("playerName");
        }
    }

    public void OpenRoomCreate()
    {
        CloseMenus();
        createRoomScreen.SetActive(true);
    }

    public void CreateRoom()
    {
        if (!string.IsNullOrEmpty(roomNameInput.text))
        {
            RoomOptions options = new RoomOptions();
            options.MaxPlayers = 8;

            //Create a room for 8 players with the name you wrote.
            PhotonNetwork.CreateRoom(roomNameInput.text, options);

            CloseMenus();
            loadingText.text = "Creating Room...";
            loadingScreen.SetActive(true);
        }
    }

    public override void OnJoinedRoom()
    {
        CloseMenus();
        roomScreen.SetActive(true);

        roomNameText.text = PhotonNetwork.CurrentRoom.Name;

        ListAllPlayers();

        //Only the room creator can start the game.
        if (PhotonNetwork.IsMasterClient)
        {
            startButton.SetActive(true);
        }
        else
        {
            startButton.SetActive(false);
        }
    }

    private void ListAllPlayers()
    {
        foreach (TMP_Text player in allPlayerNames)
        {
            Destroy(player.gameObject);
        }
        allPlayerNames.Clear();

        //Create a list with all the players, to show their names below.
        Player[] players = PhotonNetwork.PlayerList;
        for(int i = 0; i < players.Length; i++)
        {
            TMP_Text newPlayerLabel = Instantiate(playerNameLabel, playerNameLabel.transform.parent);
            newPlayerLabel.text = players[i].NickName;
            newPlayerLabel.gameObject.SetActive(true);

            //Adding each player name to the list.
            allPlayerNames.Add(newPlayerLabel);
        }
    }

    public override void OnPlayerEnteredRoom(Player newPlayer)
    {
        //Adding the player's name to the list once they enter the room.
        TMP_Text newPlayerLabel = Instantiate(playerNameLabel, playerNameLabel.transform.parent);
        newPlayerLabel.text = newPlayer.NickName;
        newPlayerLabel.gameObject.SetActive(true);

        allPlayerNames.Add(newPlayerLabel);
    }

    public override void OnPlayerLeftRoom(Player otherPlayer)
    {
        ListAllPlayers();
    }

    public override void OnCreateRoomFailed(short returnCode, string message)
    {
        errorText.text = "Failed To Create Room: " + message;
        CloseMenus();
        errorScreen.SetActive(true);
    }

    public void CloseErrorScreen()
    {
        CloseMenus();
        roomScreen.SetActive(true);
    }

    public void LeaveRoom()
    {
        PhotonNetwork.LeaveRoom();
        CloseMenus();
        loadingText.text = "Leaving Room";
        loadingScreen.SetActive(true);
    }

    public override void OnLeftRoom()
    {
        CloseMenus();
        menuButtons.SetActive(true);
    }

    public void OpenRoomBrowser()
    {
        CloseMenus();
        roomBrowserScreen.SetActive(true);
    }

    public void CloseRoomBrowser()
    {
        CloseMenus();
        menuButtons.SetActive(true);
    }

    public override void OnRoomListUpdate(List<RoomInfo> roomList)
    {
        //Updates the list of rooms every time a player generates or eliminates one.
        foreach(RoomButtonScript rb in allRoomButtons)
        {
            Destroy(rb.gameObject);
        }
        allRoomButtons.Clear();

        theRoomButton.gameObject.SetActive(false);

        for(int i = 0; i < roomList.Count; i++)
        {
            if(roomList[i].PlayerCount != roomList[i].MaxPlayers && !roomList[i].RemovedFromList)
            {
                RoomButtonScript newButton = Instantiate(theRoomButton, theRoomButton.transform.parent);
                newButton.SetButtonDetails(roomList[i]);
                newButton.gameObject.SetActive(true);

                allRoomButtons.Add(newButton);
            }
        }
    }

    public void JoinRoom(RoomInfo inputInfo)
    {
        PhotonNetwork.JoinRoom(inputInfo.Name);

        CloseMenus();
        loadingText.text = "Joining Room...";
        loadingScreen.SetActive(true);
    }

    public void SetNickName()
    {
        if (!string.IsNullOrEmpty(nameInput.text))
        {
            PhotonNetwork.NickName = nameInput.text;

            //Saving the selected username for subsequent games.
            PlayerPrefs.SetString("playerName", nameInput.text);

            CloseMenus();
            menuButtons.SetActive(true);

            hasSetNick = 1;
            PlayerPrefs.SetInt("UserName", hasSetNick);

            //Showing the username in the menu.
            username.text = nameInput.text;
        }
    }

    public void StartGame()
    {
        loadingText.gameObject.SetActive(true);
        PhotonNetwork.LoadLevel(allMaps[0]);
    }

    public override void OnMasterClientSwitched(Player newMasterClient)
    {
        if (PhotonNetwork.IsMasterClient)
        {
            startButton.SetActive(true);
        }
        else
        {
            startButton.SetActive(false);
        }
    }

    public void Appearance()
    {
        //Shows the appearance menu, where the user can change the character's skin.
        menuButtons.SetActive(false);
        appearanceButtons.SetActive(true);
        menuEffects.rotatePlayer = 1;
        CameraMovement.Appearance = true;
    }

    public void MainMenuBack()
    {
        menuButtons.SetActive(true);
        appearanceButtons.SetActive(false);
        configurationMenu.SetActive(false);
        menuEffects.rotatePlayer = 0;
        CameraMovement.MainMenu = true;
    }

    public void Configuration()
    {
        menuButtons.SetActive(false);
        CameraMovement.Configuration = true;
    }

    public void YellowSkin()
    {
        SendVariable.ChangeSkin(0);
    }

    public void PurpleSkin()
    {
        SendVariable.ChangeSkin(1);
    }

    public void RedDamagedSkin()
    {
        SendVariable.ChangeSkin(2);
    }

    public void QuitGame()
    {
        Application.Quit();
    }
}