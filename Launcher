using System.Collections.Generic;
using UnityEngine;
using Photon.Pun;
using Photon.Realtime;
using TMPro;

// This code contains all the logic for the game's main menu buttons.
public class Launcher : MonoBehaviourPunCallbacks
{
    // Singleton instance
    public static Launcher instance;

    // Buttons
    public GameObject menuButtons, appearanceButtons, configurationMenu, startButton;

    // Effects
    public MenuCameraMovement CameraMovement;
    public Mainmenueffects menuEffects;

    // Create Room Objects
    public GameObject createRoomScreen;
    public TMP_InputField roomNameInput;

    // Room
    public GameObject roomScreen;
    public TMP_Text roomNameText;

    // Error screen
    public GameObject errorScreen;
    public TMP_Text errorText;

    // Finding Room Variables
    public GameObject roomBrowserScreen;
    public RoomButtonScript theRoomButton;
    private List<RoomButtonScript> allRoomButtons = new List<RoomButtonScript>();

    // Players Names
    public TMP_Text playerNameLabel;
    private List<TMP_Text> allPlayerNames = new List<TMP_Text>();

    // Write your name
    public GameObject nameInputScreen;
    public TMP_InputField nameInput;
    public static int hasSetNick = 0;
    public TMP_Text username;

    // Loading Bar Variables
    public GameObject loadingScreen;
    public TMP_Text loadingText;

    // Changing Maps
    public string[] allMaps;

    // Sending info between scenes
    public Send SendVariable;

    private void Awake()
    {
        instance = this;
    }

    void Start()
    {
        // Call the CloseMenus function to verify that all screens are closed.
        CloseMenus();

        loadingScreen.SetActive(true);
        loadingText.text = "Connecting to network...";

        if (!PhotonNetwork.IsConnected)
        {
            PhotonNetwork.ConnectUsingSettings();
        }
    }

    void CloseMenus()
    {
        // Close all menu screens
        loadingScreen.SetActive(false);
        menuButtons.SetActive(false);
        createRoomScreen.SetActive(false);
        roomScreen.SetActive(false);
        errorScreen.SetActive(false);
        roomBrowserScreen.SetActive(false);
        nameInputScreen.SetActive(false);
    }

    public override void OnConnectedToMaster()
    {
        // Once connected to the Photon master server, join the lobby
        PhotonNetwork.JoinLobby();

        PhotonNetwork.AutomaticallySyncScene = true;

        loadingText.text = "Joining Lobby...";
    }

    public override void OnJoinedLobby()
    {
        // Set player's nickname and manage username screen logic
        PhotonNetwork.NickName = "Player " + Random.Range(1, 9).ToString();

        if (PlayerPrefs.GetInt("UserName") != 1)
        {
            CloseMenus();
            nameInputScreen.SetActive(true);

            if (PlayerPrefs.HasKey("playerName"))
            {
                nameInput.text = PlayerPrefs.GetString("playerName");
            }
        }
        else
        {
            PhotonNetwork.NickName = PlayerPrefs.GetString("playerName");
            nameInput.text = PlayerPrefs.GetString("playerName");
            CloseMenus();
            menuButtons.SetActive(true);
        }

        // Show the username in the menu
        username.text = nameInput.text;
    }

    public void EditNickName()
    {
        // Allow editing of nickname
        CloseMenus();
        nameInputScreen.SetActive(true);

        if (PlayerPrefs.HasKey("playerName"))
        {
            nameInput.text = PlayerPrefs.GetString("playerName");
        }
    }

    public void OpenRoomCreate()
    {
        // Open room creation screen
        CloseMenus();
        createRoomScreen.SetActive(true);
    }

    public void CreateRoom()
    {
        // Create a room with specified options
        if (!string.IsNullOrEmpty(roomNameInput.text))
        {
            RoomOptions options = new RoomOptions();
            options.MaxPlayers = 8;

            PhotonNetwork.CreateRoom(roomNameInput.text, options);

            CloseMenus();
            loadingText.text = "Creating Room...";
            loadingScreen.SetActive(true);
        }
    }

    public override void OnJoinedRoom()
    {
        // Once joined a room, show room screen and handle UI elements accordingly
        CloseMenus();
        roomScreen.SetActive(true);

        roomNameText.text = PhotonNetwork.CurrentRoom.Name;

        ListAllPlayers();

        if (PhotonNetwork.IsMasterClient)
        {
            startButton.SetActive(true);
        }
        else
        {
            startButton.SetActive(false);
        }
    }

    private void ListAllPlayers()
    {
        // Display all players in the room
        foreach (TMP_Text player in allPlayerNames)
        {
            Destroy(player.gameObject);
        }
        allPlayerNames.Clear();

        Player[] players = PhotonNetwork.PlayerList;
        for (int i = 0; i < players.Length; i++)
        {
            TMP_Text newPlayerLabel = Instantiate(playerNameLabel, playerNameLabel.transform.parent);
            newPlayerLabel.text = players[i].NickName;
            newPlayerLabel.gameObject.SetActive(true);

            allPlayerNames.Add(newPlayerLabel);
        }
    }

    public override void OnPlayerEnteredRoom(Player newPlayer)
    {
        // When a player enters the room, add their name to the list
        TMP_Text newPlayerLabel = Instantiate(playerNameLabel, playerNameLabel.transform.parent);
        newPlayerLabel.text = newPlayer.NickName;
        newPlayerLabel.gameObject.SetActive(true);

        allPlayerNames.Add(newPlayerLabel);
    }

    public override void OnPlayerLeftRoom(Player otherPlayer)
    {
        // When a player leaves the room, refresh the list of players
        ListAllPlayers();
    }

    public override void OnCreateRoomFailed(short returnCode, string message)
    {
        // Show error message if room creation fails
        errorText.text = "Failed To Create Room: " + message;
        CloseMenus();
        errorScreen.SetActive(true);
    }

    public void CloseErrorScreen()
    {
        // Close error screen and show room screen
        CloseMenus();
        roomScreen.SetActive(true);
    }

    public void LeaveRoom()
    {
        // Leave the current room
        PhotonNetwork.LeaveRoom();
        CloseMenus();
        loadingText.text = "Leaving Room";
        loadingScreen.SetActive(true);
    }

    public override void OnLeftRoom()
    {
        // When leaving a room, show menu buttons
        CloseMenus();
        menuButtons.SetActive(true);
    }

    public void OpenRoomBrowser()
    {
        // Open room browser
        CloseMenus();
        roomBrowserScreen.SetActive(true);
    }

    public void CloseRoomBrowser()
    {
        // Close room browser and show menu buttons
        CloseMenus();
        menuButtons.SetActive(true);
    }

    public override void OnRoomListUpdate(List<RoomInfo> roomList)
    {
        // Update the list of available rooms
        foreach (RoomButtonScript rb in allRoomButtons)
        {
            Destroy(rb.gameObject);
        }
        allRoomButtons.Clear();

        theRoomButton.gameObject.SetActive(false);

        for (int i = 0; i < roomList.Count; i++)
        {
            if (roomList[i].PlayerCount != roomList[i].MaxPlayers && !roomList[i].RemovedFromList)
            {
                RoomButtonScript newButton = Instantiate(theRoomButton, theRoomButton.transform.parent);
                newButton.SetButtonDetails(roomList[i]);
                newButton.gameObject.SetActive(true);

                allRoomButtons.Add(newButton);
            }
        }
    }

    public void JoinRoom(RoomInfo inputInfo)
    {
        // Join a specific room
        PhotonNetwork.JoinRoom(inputInfo.Name);

        CloseMenus();
        loadingText.text = "Joining Room...";
        loadingScreen.SetActive(true);
    }

    public void SetNickName()
    {
        // Set the player's nickname
        if (!string.IsNullOrEmpty(nameInput.text))
        {
            PhotonNetwork.NickName = nameInput.text;

            PlayerPrefs.SetString("playerName", nameInput.text);

            CloseMenus();
            menuButtons.SetActive(true);

            hasSetNick = 1;
            PlayerPrefs.SetInt("UserName", hasSetNick);

            username.text = nameInput.text;
        }
    }

    public void StartGame()
    {
        // Start the game
        loadingText.gameObject.SetActive(true);
        PhotonNetwork.LoadLevel(allMaps[0]);
    }

    public override void OnMasterClientSwitched(Player newMasterClient)
    {
        // Handle master client switching
        if (PhotonNetwork.IsMasterClient)
        {
            startButton.SetActive(true);
        }
        else
        {
            startButton.SetActive(false);
        }
    }

    public void Appearance()
    {
        // Show appearance menu
        menuButtons.SetActive(false);
        appearanceButtons.SetActive(true);
        menuEffects.rotatePlayer = 1;
        CameraMovement.Appearance = true;
    }

    public void MainMenuBack()
    {
        // Return to main menu
        menuButtons.SetActive(true);
        appearanceButtons.SetActive(false);
        configurationMenu.SetActive(false);
        menuEffects.rotatePlayer = 0;
        CameraMovement.MainMenu = true;
    }

    public void Configuration()
    {
        // Show configuration menu
        menuButtons.SetActive(false);
        CameraMovement.Configuration = true;
    }

    public void YellowSkin()
    {
        // Change skin to yellow
        SendVariable.ChangeSkin(0);
    }

    public void PurpleSkin()
    {
        // Change skin to purple
        SendVariable.ChangeSkin(1);
    }

    public void RedDamagedSkin()
    {
        // Change skin to red damaged
        SendVariable.ChangeSkin(2);
    }

    public void QuitGame()
    {
        // Quit the game
        Application.Quit();
    }
}
